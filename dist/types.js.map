{"version":3,"sources":["../src/types.ts"],"sourcesContent":["import type { CollectionOptions } from '@payloadcms/plugin-cloud-storage/types'\nimport type { Plugin, UploadCollectionSlug } from 'payload'\n\nexport type AdminThumbnailOptions = {\n  appendTimestamp?: boolean\n  queryParams?: Record<string, string>\n}\n\nexport type BunnyAdapterOptions = {\n  adminThumbnail?: AdminThumbnailOptions | boolean\n  purge?: {\n    apiKey: string\n    async?: boolean\n    enabled: boolean\n  }\n  storage: {\n    apiKey: string\n    hostname: string\n    region?: 'br' | 'jh' | 'la' | 'ny' | 'se' | 'sg' | 'syd' | 'uk' | ({} & string)\n    zoneName: string\n  }\n  stream?: {\n    apiKey: string\n    hostname: string\n    libraryId: string\n    mp4Fallback?: {\n      enabled: boolean\n    }\n    /**\n     * @deprecated Use mp4Fallback with enabled: true instead.\n     *\n     * Example: mp4Fallback: { enabled: true }\n     */\n    mp4FallbackQuality?: '240p' | '360p' | '480p' | '720p'\n    thumbnailTime?: number\n  }\n}\n\nexport type BunnyPlugin = (bunnyStorageOptions: BunnyStorageOptions) => Plugin\n\nexport type BunnyStorageOptions = {\n  collections: Partial<Record<UploadCollectionSlug, Omit<CollectionOptions, 'adapter'> | true>>\n  enabled?: boolean\n  options: BunnyAdapterOptions\n}\n\nexport interface BunnyVideoMeta {\n  availableMp4Resolutions?: string[]\n  highestMp4Resolution?: string\n}\n\nexport interface BunnyResolutionsResponse {\n  data: {\n    mp4Resolutions: Array<{\n      path: string\n      resolution: string\n    }>\n  }\n  success: boolean\n}"],"names":[],"mappings":"AAmDA,WAQC"}